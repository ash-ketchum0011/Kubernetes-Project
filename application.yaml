#SecretProviderClass for Azure Key Vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: postgres-spc
  namespace: keda-demo
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"          # set "true" if using Managed Identity
    useVMManagedIdentity: "true"     # for AKS-managed identity
    userAssignedIdentityID: "ce0d4eeb-6785-47f4-87ca-d3ba1a7c278f"  # if using user-assigned identity
    keyvaultName: "kv-aks-prod-002-unique"
    cloudName: ""                    # leave empty for Azure global
    objects: |
      array:
        - |
          objectName: POSTGRES-USER
          objectType: secret
        - |
          objectName: POSTGRES-PASSWORD
          objectType: secret
        - |
          objectName: POSTGRES-DB
          objectType: secret
    tenantId: "991e8ae3-42fa-4862-8093-37f16a2c5fca"
  secretObjects:                      # sync Key Vault values into K8s Secret
    - secretName: postgres-secret
      type: Opaque
      data:
        - objectName: POSTGRES-USER
          key: POSTGRES_USER
        - objectName: POSTGRES-PASSWORD
          key: POSTGRES_PASSWORD
        - objectName: POSTGRES-DB
          key: POSTGRES_DB

---
#KEDA Postgres ScaledObject and TriggerAuthentication
apiVersion: v1
kind: Secret
metadata:
  name: postgres-conn-secret
  namespace: keda-demo
type: Opaque
stringData:
  POSTGRES_CONN_STR: "postgresql://admin:admin123@postgres.keda-demo.svc.cluster.local:5432/mydb"
---
#Namespace for all the workloads
apiVersion: v1
kind: Namespace
metadata:
  name: keda-demo

---
#backend Postgres Deployment and Service
#backend Postgres Deployment with Init Container
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: keda-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
      - name: postgres-init
        image: postgres:15
        env:
        - name: PGHOST
          value: "127.0.0.1"  # Connect to localhost since it's in same pod
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        command:
        - /bin/bash
        - -c
        - |
          echo "Starting database initialization..."
          
          # Wait for PostgreSQL to be ready
          until pg_isready -h 127.0.0.1 -p 5432 -U ${PGUSER}; do
            echo "Waiting for PostgreSQL to start..."
            sleep 3
          done
          
          echo "PostgreSQL is ready. Creating schema..."
          
          # Create the task table
          psql -h 127.0.0.1 -p 5432 -U ${PGUSER} -d ${PGDATABASE} -c "
            CREATE TABLE IF NOT EXISTS task (
              id SERIAL PRIMARY KEY,
              name VARCHAR(100) NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
          "
          
          # Insert sample data
          psql -h 127.0.0.1 -p 5432 -U ${PGUSER} -d ${PGDATABASE} -c "
            INSERT INTO task (name) VALUES 
            ('Initial task 1'),
            ('Initial task 2'),
            ('Sample workload')
            ON CONFLICT DO NOTHING;
          "
          
          # Verify data
          COUNT=$(psql -h 127.0.0.1 -p 5432 -U ${PGUSER} -d ${PGDATABASE} -t -c "SELECT COUNT(*) FROM task;")
          echo "Task table initialized with ${COUNT} rows"
          
          echo "Database initialization completed successfully"
        volumeMounts:
        - name: secrets-store
          mountPath: /mnt/secrets-store
          readOnly: true
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: secrets-store
          mountPath: /mnt/secrets-store
          readOnly: true
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "postgres-spc"
      - name: postgres-storage
        emptyDir: {}  # For demo purposes - use PVC for production

---
#postgres service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: keda-demo
spec:
  ports:
    - port: 5432
  selector:
    app: postgres

---
#frontend Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: keda-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: bitnami/python:3.9
          command: ["python"]
          args: ["-m", "http.server", "8080"]
          ports:
            - containerPort: 8080
          env:
            - name: DB_HOST
              value: postgres
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
          volumeMounts:
            - name: secrets-store
              mountPath: /mnt/secrets-store
              readOnly: true
      volumes:
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "postgres-spc"

---
#frontend service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: keda-demo
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: frontend

---
#KEDA TriggerAuthentication for Postgres
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: postgres-secret-auth
  namespace: keda-demo
spec:
  secretTargetRef:
    - parameter: host
      name: postgres-conn-secret
      key: POSTGRES_CONN_STR  # Will extract host from connection string
    - parameter: password
      name: postgres-secret
      key: POSTGRES_PASSWORD

---
#KEDA ScaledObject for frontend deployment
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: frontend-scaledobject
  namespace: keda-demo
spec:
  scaleTargetRef:
    name: frontend
  pollingInterval: 10
  cooldownPeriod: 30
  minReplicaCount: 1
  maxReplicaCount: 5
  triggers:
    - type: postgresql
      metadata:
        host: "postgres.keda-demo.svc.cluster.local"
        port: "5432"
        userName: "admin"  # Direct value since it's not sensitive
        dbName: "mydb"     # Fixed to match POSTGRES_DB
        sslmode: "disable"
        query: "SELECT COUNT(*) FROM task;"
        targetQueryValue: "1"
      authenticationRef:
        name: postgres-secret-auth


